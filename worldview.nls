;;
;; World View
;;
;; import the bitmap, match colours and path types, save the bitmap, stuff like that.
;;



globals [
  clr-path
  clr-slowmud
  clr-tiredmud
  clr-road
  clr-danger
  clr-moveable-facility
  clr-fixed-facility
  clr-fixed-facility2
  clr-void
]


patches-own [
  building-number   ;; number (14, 15, or 16) to identify the material sources
  building-width    ;;
  building-height   ;;  for moving and rebuilding.
]


;;
;; add-blocks
;;
;; If the button for "add blocks" is on, this function watches for mouse clicks, and 
;; changes the color of the patches to the selected one.  It will not change buildings or space
;; outside of the construction zone.
;;
to add-blocks
  let fixedcolors (list clr-moveable-facility clr-fixed-facility clr-fixed-facility2 clr-void)
  every .1
   [ if mouse-down?
     [ ask patch mouse-xcor mouse-ycor [
       ask patches in-radius 3 with [not member? pcolor fixedcolors] [
         if new-path-type = "slowmud"
            [ set pcolor clr-slowmud ]
         if new-path-type = "tiredmud"
            [ set pcolor clr-tiredmud ]
         if new-path-type = "path"
            [ set pcolor clr-path ]
         if new-path-type = "danger"
            [ set pcolor clr-danger ]
        ]
     ]
     ]
   ]
end

;;
;; SaveWorldBitmap
;;
;; Save the current world view as a bitmap, after killing all of the workers.  We don't want the workers to show up in the bitmap.
;;
to SaveWorldBitmap 
  ask workers [ die ]  ;; we don't want them to show in the bitmap
  bitmap:export bitmap:from-view "results-bitmap.bmp"
end

to read-color-file [ colorfile]


  ;; default colours
  set clr-path 39   ; beige
  set clr-road 37   ; med brown
  set clr-slowmud 35    ; light brown
  set clr-tiredmud 47  ;  yellow
  set clr-danger 27 ; oranage
  set clr-moveable-facility 55  ;green
  set clr-fixed-facility 122 ; dark purple
  set clr-fixed-facility2 127 ; lighter purple
  set clr-void  0    ;  black, out of the map

  ;; read colourfile
  file-open colorfile
  let  labels csv:from-row file-read-line
  while [ not file-at-end? ] [
    let row csv:from-row file-read-line
    let clrpatch item 0 row
    let clrnum item 1 row
    let clrrgb item 2 row
    let clrname item 3 row
    if (clrpatch = "clr-path") [ set clr-path  clrnum ]
    if (clrpatch = "clr-road") [ set clr-road  clrnum ]
    if (clrpatch = "clr-slowmud") [ set clr-slowmud  clrnum ]
    if (clrpatch = "clr-tiredmud") [ set clr-tiredmud  clrnum ]
    if (clrpatch = "clr-danger") [ set clr-danger  clrnum ]
    if (clrpatch = "clr-moveable-facility") [ set clr-moveable-facility  clrnum ]
    if (clrpatch = "clr-fixed-facility") [ set clr-fixed-facility  clrnum ]
    if (clrpatch = "clr-fixed-facility2") [ set clr-fixed-facility2  clrnum ]
    if (clrpatch = "clr-void") [ set clr-void  clrnum ]
  ]
  file-close
end

;;
;; setup-patches
;;
;; Read bitmap, draw world.  Make sure that all patches colors are ones we work with - adjust the ones that are not.
;;
to setup-patches [mapfile colorfile]

   read-color-file colorfile

  ;; read image
  let mapcolors (list clr-path clr-road clr-slowmud clr-tiredmud clr-danger clr-moveable-facility clr-fixed-facility clr-fixed-facility2 clr-void)
  bitmap:copy-to-pcolors (bitmap:import mapfile) true
  

  ;; adjust patch colours to match our list
  let extracolors (list -1)
  ask patches
  [
    set building-number 0
    set pcolor round pcolor   ;; adjust the fuzzy patches

    ;; find all the colours that are not one of our scheme, and adjust them to fit.
    if (not member? pcolor mapcolors) [
      if (pcolor > 0 and pcolor <= 4) [ set pcolor clr-void ]
      if (pcolor >= 5 and pcolor <= 9) [ set pcolor clr-path ]
      if (pcolor = 13 ) [set pcolor clr-fixed-facility2]
      if (pcolor >= 17 and pcolor <= 19 ) [ set pcolor clr-path ]
      if (pcolor = 20 ) [ set pcolor clr-void ]
      if (pcolor >= 26 and pcolor <= 29 ) [ set pcolor clr-danger ]
      if (pcolor >= 30 and pcolor <= 35 ) [ set pcolor clr-void ]
      if (pcolor >= 36 and pcolor <= 36 ) [ set pcolor clr-slowmud ]   ;; not possible to sort road/mud here
      ;; 37 is road
      if (pcolor >= 38 and pcolor <= 38 ) [ set pcolor clr-path ]
      if (pcolor = 40 ) [ set pcolor clr-void ]  ;; divisble by 10 is always black, in every hue.  
      if (pcolor >= 44 and pcolor <= 48 ) [ set pcolor clr-tiredmud ]   
      if (pcolor = 50 ) [ set pcolor clr-void ]
      if (pcolor >= 80 and pcolor <= 83 ) [ set pcolor clr-void ]
      if (pcolor >= 90 and pcolor <= 93 ) [ set pcolor clr-void ]
      if (pcolor >= 100 and pcolor <= 105 ) [ set pcolor clr-void ]
      if (pcolor >= 106 and pcolor <= 109 ) [ set pcolor clr-path ]
      if (pcolor >= 110 and pcolor <= 115 ) [ set pcolor clr-void ]
      if (pcolor >= 120 and pcolor <= 123 ) [ set pcolor blue ]
      if (pcolor >= 124 and pcolor <= 128 ) [ set pcolor clr-fixed-facility2 ]
      if (pcolor = 129 ) [ set pcolor clr-path ]
      if (pcolor >= 130 and pcolor <= 134) [ set pcolor clr-fixed-facility2 ]
      if (not member? pcolor extracolors and not member? pcolor mapcolors) [
        ;; show (word "unexpected color " pcolor " at " pxcor "," pycor)
         set extracolors lput pcolor extracolors  ;; did we miss any?
      ]
    ]
  ]
;;   show (word "Unrecognized colors in bitmap: " extracolors )

end

