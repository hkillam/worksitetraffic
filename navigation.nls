;;
;; NAVIGATION
;;
;; a collection of functions that determine how workers move along the breadcrumb trail.
;;
;; (creation of breadcrumbs is being moved to code-scout.nls)  Shared functions stay in this file.
;;


;;
;; trail-exists
;;
;; do we have breadcrumbs for this trail between two buildings?
;;
to-report trail-exists [src dst bold]
  foreach breadcrumb-trails [
    if item 0 ? = src and item 1 ? = dst and item 2 ? = bold 
    [ report true ]
    if item 1 ? = src and item 0 ? = dst and item 2 ? = bold
    [ report true ]
  ]  
  report false
end



;;
;; draw-breadcrumb-trail
;;
;; only used for diagnostic purposes.  does not affect how the workers move.
;; note that all workers are dead at the end of this, so call it before setting up workers.
;;

to draw-breadcrumb-trail [path]
without-interruption [  
  
  create-scout 1 1 1 1
  
  if length path > 4 [
    
    let pt1 item 4 path
    ask scouts [ 
      set color random (9) * 10 + 5
      move-to pt1
      pen-down 
    ]
    
    foreach path [
      if is-patch? ? [
        ask scouts [ move-to ?  ]
      ]
    ]
  ]
  
  ask scouts [ die ]
]
end  ;; draw-breadcrumb-trail

;;
;; path-clear
;;
;; create a temporary worker to walk from one point to the second, and see if there is anything in the way
;;
;; returns true/false
;; 
to-report path-clear [pt1 pt2 radius]
  let isclear true 
  let dude who
  let debug-mode false
  
  if who = -1 [set debug-mode true]
  hatch 1 [ 
    if debug-mode = true [show (word "hatched a who " who )]
    ;; move our guy to the first breadcrumb, and look at the next
    if debug-mode = true [
      show (word pt1 pt2 )
      move-to pt2 
;;      set size 0.1 
      set color red 
      ;;pen-down 
      show (word "src: " pt1 " dest: " pt2)
      show (word "allowed colors: " allowed-patches)
     ]  ;; show the line
    move-to pt1
    if debug-mode = true [pen-up]
    face-nowrap pt2
    let dist distance  pt2
    if debug-mode = true [ show dist ]
    let step-counter 1                              ;; count steps along the path that is being examined
    
   
    ;; if (not is-allowed-patch patch-ahead step-counter 2 allowedpatches)
    while [step-counter < dist + 1 and isclear = true] [
      if debug-mode = true [
;;        show ( word patch-ahead step-counter " "  [pcolor] of patch-ahead step-counter) 
;;        show is-allowed-patch patch-ahead step-counter radius
        
      ]
      if  patch-ahead step-counter = pt2 [ die report isclear]
      set step-counter step-counter + 1
      
      if ( is-allowed-patch patch-ahead step-counter radius = false) [
        if debug-mode = true [
          show (word "problem " step-counter " steps ahead at patch " patch-ahead step-counter " colour " [pcolor] of patch-ahead step-counter)
          show (word "from patch " pt1 " to patch " pt2 " only using " allowed-patches)
        ]
        set isclear false
      ]
    ]
    
    ;; diagnostic 
    if isclear = true and debug-mode = true [
      ;;pen-down
      set color blue
      move-to pt2
    ]
    
    die
  ]

  report isclear
end


;;
;; bestheading-path
;;
;; receives a list of [heading distance] options
;; returns heading with the longest distance
;;
to-report bestheading-path [mypaths]
  
   let myheading  heading
   let step-count  0
   foreach mypaths [
     if  item 1 ? > step-count [
       set myheading  item 0 ?
       set step-count  item 1 ?
     ]
   ]
   report myheading
end


;;
;; show-planned-path
;;
;; helper function - sketch the path we plan to follow
;; visible lines do not affect how turtles move - the patch color under the path is not changed.
;;
to show-planned-path [steps]
       if steps > 0  [
         hatch 1 [
           set color blue
           set size 0.01
           ;; pen-down fd steps
          ;; wait 1
          ;; pen-erase bk steps
           die
         ]]
end


;;
;; select-breadcrumbs [ src dest bold ]
;;
;; Called when a worker picks a destination, or changes direction.
;; returns an array of (pathindex reversed point)
;; where point is the position in the array of points
;;
to-report select-breadcrumbs [src dest bold ]
   let trailid 0
  
   foreach breadcrumb-trails
   [ 
      if src = item 0 ? and dest = item 1 ? and bold = item 2 ? [ report ( list trailid false 4) ]
      if src = item 1 ? and dest = item 0 ? and bold = item 2 ? [ report ( list trailid true (length ? - 1)) ]
      set trailid trailid + 1
   ]
   report (list )
end


;;
;; follow-the-yellow-brick-road
;;
;; face the next breadcrumb, and don't step on each other.
;;
to follow-the-yellow-brick-road
  let debug-mode false
  let debug false
  
  ;; are we still playing?
  if color = black [ stop ]

  let crumb item breadcrumb-num  (item trail-id breadcrumb-trails)
  
  ;; can we see the  crumb ahead?  (do not skip crumbs - check this before the goal)  (function also updates the current crumb-id)
  if next-crumb-in-sight? = true [
      if debug = true [show (word "next crumb is visible.  ")]
      set crumb item breadcrumb-num  (item trail-id breadcrumb-trails)
      face-nowrap crumb
      stop
  ]
  
  
  ;; can we see the actual goal?
  if debug = true [show is-crossing-breadcrumbs?]
  if path-clear patch-here goal 0 = true
  and (is-crossing-breadcrumbs? = false or breadcrumb-num = 0)
  [
    if debug = true and breadcrumb-num != 0 [show "the end is near"]
    if debug-mode [
      show (word "it thinks the path is clear to the goal.  " item trail-id breadcrumb-trails )
    ]
    set breadcrumb-num 0
    face-nowrap goal
    stop
  ]
  
  if breadcrumb-num < 4
  [
    ;; there are no crumbs if there is a direct path between buildings.  but we might be in a corner somewhere.
    if debug-mode [ show (word "no crumbs, and can't see goal, stuck in a weird corner " pxcor "," pycor " " goal)]
    ;; todo - select a new dest square, at random, or pick a new place in the current building
    stop
  ] 
  
;;  show (word "on patch " pxcor ", " pycor " using crumb " breadcrumb-num)

 
  ;; continue to the current crumb
  if path-clear patch-here crumb 0
  [
    if debug = true [show (word "looking at the crumb: " crumb)]
    face-nowrap crumb
    stop
  ]
  
;;  show (word "lost in a snowstorm - can't see breadcrumbs " breadcrumb-num " of " item trail-id breadcrumb-trails )
  ;; uhhhh...  seek open ground, i guess
  let good-patches allowed-patches
  let some-rando one-of patches in-radius 1 with [member? pcolor good-patches and count turtles <= (max-turtles-per-square + 1)]
  if is-patch? some-rando [set crumb some-rando]
 
  face-nowrap crumb
end


;;  
;; is-crossing-breadcrumbs?
;; returns true/false
;;
;; Tells us if the worker is cutting a corner past a breadcrumb.  We want them to stay on their own side of the line.
;;
to-report is-crossing-breadcrumbs?
  if breadcrumb-num < 4 [report false]  ;; no breadcrumbs for a direct line of sight.
  let thiscrumb item breadcrumb-num  (item trail-id breadcrumb-trails)
  let crossing false
  let debug false

  if debug = true [ show item trail-id breadcrumb-trails ]
  if debug = true [ show thiscrumb ]
  
  ;; get the next crumb in the trail
  let next-crumb-num breadcrumb-num + 1
  if breadcrumb-reverse = true [set next-crumb-num breadcrumb-num - 1]
  let nextcrumb []
  let patch2 goal
  ifelse next-crumb-num < length item trail-id breadcrumb-trails and next-crumb-num > 3 [
     set nextcrumb item next-crumb-num ( item trail-id breadcrumb-trails)
     set patch2 nextcrumb
     
  ][
     if debug = true [show "checking end goal"]
     set patch2 goal  ;; at the end of the trail, compare the direction to the goal
     ;;report false ;; at the end of the crumb trail, we can't cross it because it doesn't continue
  ]
  
  if debug = true [ show (word "patch2 new dest: " patch2 " next crumb id " next-crumb-num) ]
  
  let patch1 thiscrumb

  hatch 1 [
     ;; stay to the right of the breadcrumb trail - if the trail ahead curves to the left, stay on the trail and don't cut the corner
     face-nowrap patch1
     let current-heading heading
     if debug = true [ show (word "my heading: " current-heading) ]
     face-nowrap patch2
     let next-heading heading
     if debug = true [ show (word "next heading: " next-heading) ]
     if next-heading  < current-heading or (next-heading > 270 and current-heading < 90)
     [
        set crossing true
        if debug = true [ show (word "crossing") ]
    
        ;;  if item 0 thiscrumb = pxcor and item 1 thiscrumb = pycor [  ;; when we had arrays of coords instead of simply using patches
        if  distance  thiscrumb < 2 [
           set crossing false
           if debug = true [ show (word "sitting on " patch-here " target is " thiscrumb)  ]
           die
      ]
   ]   
   
  die
  
  ]
  if debug = true [ show (word "crossing set to " crossing) ]
      report crossing
end

;;  
;; next-crumb-in-sight?
;; returns true/false
;;
;;  Tells us if there is a clear path to the next crumb, so we can update how far along the trail we are.
;;  NOTE:  this function will update the breadcrumb-num for the worker if the next crum is in sight
;;
to-report next-crumb-in-sight? 
  if breadcrumb-num = 0 [report false]
  
  let thiscrumb item breadcrumb-num  (item trail-id breadcrumb-trails)
  
  ;; get the next crumb in the trail
  let next-crumb-num breadcrumb-num + 1
  if breadcrumb-reverse = true [set next-crumb-num breadcrumb-num - 1]
  let nextcrumb []
  if next-crumb-num < length item trail-id breadcrumb-trails [
     set nextcrumb item next-crumb-num ( item trail-id breadcrumb-trails)
  ]

  if not is-patch?  nextcrumb [ report false ]  ;; this is not a crumb, abort mission
  
  ;; stay to the right of the breadcrumb trail - if the trail ahead curves to the left, stay on the trail and don't cut the corner
  if is-crossing-breadcrumbs?  [report false]

  ;; see if we have a clear path
  if  is-patch? nextcrumb
  [
    if path-clear patch-here nextcrumb 0 and is-crossing-breadcrumbs? = false
    [
      set breadcrumb-num next-crumb-num
      report true
    ]
  ]
    
  ;; nope.  
  report false
end


;; returns false if the scout is totally stuck
to-report turn-along-edge
    let nextpatch [pcolor] of patch-ahead 1
    let turn-counter 0
    while [not member? nextpatch  allowed-patches and turn-counter < 10] [
      ifelse (go-right? = true) [ 
         right 45
      ][ 
         left 45
      ]
      set nextpatch [pcolor] of patch-ahead 1
      set turn-counter turn-counter + 1
      
;;      hatch 1 [
;;        set size 0.01
;;        pen-down fd 15
;;        wait 1
;;        pen-erase bk 15
;;        die
;;      ]
    ]
    
   
    if (turn-counter = 10) [ 
      report false ]
    
    report true
end

;;  test-path
;;  test for length of clear path, and if destination is on this path
;;
;;  returns list of [path-length all-clear dest-ahead]
;;  path-length will be the length of clear path, up to a max of the input max-steps
;;  all clear means the path never found an obsticle.
;;  dest-ahead means we are pointed the right way, path-length will show distance to destination.
to-report test-path [max-steps theradius]

  let step-counter 0

    ;; testing
  ;;if pxcor > 72 and pxcor < 76 and max-steps = 1000 [  show "turned towards it" ]

  while [step-counter < max-steps] [
    set step-counter step-counter + 1

    ;; is the destination ahead?
    if [building-number] of  patch-ahead step-counter  = destination-building
    [
      ;;if pxcor > 72 and pxcor < 76 and max-steps = 1000 [  show (word "looking right at it " pxcor pycor) ]
      report (list step-counter true true)
    ]
    ;; what is the colour of the next patch in the path we are checking?
    let nextpatch [pcolor] of patch-ahead step-counter

    ;; see if we hit the end of the open path
    if (not is-allowed-patch patch-ahead step-counter theradius )
    [
      if step-counter = 1 [
        report (list 0 false false)
      ]  ;  totally dead end, don't return this path at all
      report (list step-counter false false)
    ]
  ]

  ;; we checked far enough, didn't encounter obsticles or destination
  report (list step-counter true false)
end

;; when checking if the next patch is a permitted colour, this function lets you check the buffer as well
;;
;; returns:  true/false
;;
to-report is-allowed-patch [thepatch theradius]
  let permitted true
  let debug-mode false
  let allowedpatchclrs allowed-patches
 ;; if who = 3815 or who = 3647
  set debug-mode false

  ifelse theradius <= 1 [
    if (not member? [pcolor] of thepatch  allowedpatchclrs) [ set permitted false ]
;;    if debug-mode = true [ show ( word "color: " pcolor " allowed: "  allowedpatchclrs " permitted?: " permitted " should be: " member? pcolor  allowedpatchclrs)  ]
  ][
    ask thepatch [
       ask patches in-radius theradius [

         if not member? pcolor allowedpatchclrs [ set permitted false ]
       ]
    ]
  ]
  report permitted
end



