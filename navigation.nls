
;; call this function before workers are created
to create-breadcrumbs [src dst bold danger-harms]
  let breadcrumbs []
  
  
  set breadcrumbs lput src breadcrumbs
  set breadcrumbs lput dst breadcrumbs
  set breadcrumbs lput  bold breadcrumbs
  set breadcrumbs lput 0 breadcrumbs  ;; place holder for path length
  
  create-temp-worker src dst bold danger-harms
  
  ask workers
  [
       while [[building-number] of patch-ahead 1 != dst] [
         
         ;; get list of all possible paths
         let mypaths possible-path-list self
         
         ifelse length mypaths = 0 [
           ;; there are no paths, hug the edges.
           set hugging-edges-steps 10;
           show "trapped";
           stop 
         ][
           let myheading bestheading-path mypaths
           set breadcrumbs add-breadcrumb myheading src dst breadcrumbs
         ]
         
         forward 1
       ]
       set breadcrumbs lput (list pxcor pycor) breadcrumbs
       
       ;; optimize the list
       let index 4
       while [index + 2 < length breadcrumbs] [
         set breadcrumbs optimize-breadcrumbs breadcrumbs index  ;; start at 5th item, first four are not points
         set index index + 1
       ]
       die
  ]  
  
  set breadcrumb-trails lput breadcrumbs breadcrumb-trails
  
end   ;; create-breadcrumbs

to-report optimize-breadcrumbs [breadcrumbs index]
  
  if index + 2 < length breadcrumbs [
    
    let pt1 item index breadcrumbs
    let pt2 item (index + 2) breadcrumbs
    
    if path-clear pt1 pt2 = true [
      ;; remove the point that is not needed, recurse deeper in.
      set breadcrumbs remove-item (index + 1) breadcrumbs
      set breadcrumbs optimize-breadcrumbs breadcrumbs index
    ]
    
  ]

  report breadcrumbs
end

to draw-breadcrumb-trail [ndx]
  let path item ndx breadcrumb-trails
  create-temp-worker 1 1 1 1
  
  let pt1 item 4 path
  ask workers [
    set color ndx * 10 + 5
    setxy  item 0 pt1 item 1 pt1
    pen-down
  ]
  
  foreach path [
    if is-list? ? [
      ask workers [ move-to patch item 0 ? item 1 ? ]
    ]
  ]
  
  ask workers [ die ]
end

to-report path-clear [pt1 pt2]
  let isclear true
  ;; move our guy to the first breadcrumb
  setxy  item 0 pt1 item 1 pt1
  let dist distancexy  item 0 pt2 item 1 pt2
  let step-counter 1                              ;; count steps along the path that is being examined
  
  
  ;; if (not is-allowed-patch patch-ahead step-counter 2 allowedpatches)
  while [step-counter < dist + 5 and isclear = true] [
    if  patch-ahead step-counter = pt2 [stop]
    set step-counter step-counter + 1
    if (not is-allowed-patch patch-ahead step-counter 2 allowed-patches) [
      set isclear false
    ]
  ]

  ;; diagnostic
  if isclear = true and 1 = 0 [
    pen-down
    set color blue
    move-to patch item 0 pt2 item 1 pt2
  ]

  report isclear
end

to create-temp-worker [src dst bold danger-harms]
  create-workers 1 [
      move-to one-of patches with [building-number = src]
      init-worker red red (list dst) src 1 1 1
      set shape "arrow"
      set size 3
      ifelse bold = 1 [
        set-worker-bold red danger-harms
      ][
        set-worker-avoider green
      ]
  ]
end

to-report bestheading-path [mypaths]
   let myheading  heading
   let step-count  0
   foreach mypaths [
     if  item 1 ? > step-count [
       set myheading  item 0 ?
       set step-count  item 1 ?
       if item 1 ? > 23 [
         set blue-sky-steps 20
       
       ]
     ]
   ]
   report myheading
end

to-report add-breadcrumb [newheading src dst breadcrumbs]
   ;; see if this is sa breadcrumb
   if newheading != heading and building-number != src and building-number != dst [
     ;; altering course, this is a breadcrumb
     set breadcrumbs lput (list pxcor pycor) breadcrumbs
     set heading newheading
   ]
   report breadcrumbs
end


;; helper function - sketch the path we plan to follow
to show-planned-path [steps]
       if steps > 0  [
         hatch 1 [
           set color blue
           set size 0.01
           pen-down fd steps
          ;; wait 1
          ;; pen-erase bk steps
           die
         ]]
end



to set-direction [little-dude]
  ;; look directly to goal;  if no trouble within the next steps, go forward.  otherwise, look to the side a bit

  let all-clear true
  let currentheading [heading] of little-dude

  ;; sometimes the "blue sky" is wrong.
  let nextpatch [pcolor] of patch-ahead 1
  if not member? nextpatch  allowed-patches and  blue-sky-steps > 0 [
    set blue-sky-steps 0
    set hugging-edges-steps 10

  ]


  ;; we are not hugging an edge, check around for a good path.
  if hugging-edges-steps < 1 [
      ifelse blue-sky-steps < 1 [
         let mypaths possible-path-list little-dude
         face-longest-path little-dude mypaths
      ][
         set blue-sky-steps  blue-sky-steps - 1  ;; stay on the current course for a few steps

      ]
  ]


  ;;  should we try hugging and edge and following it out of this dead end?
  if (hugging-edges-steps > 0) [


      ask little-dude [
         set heading  currentheading
      ]


      ;; another solution would be to set up markers between the buildings, and when you can't see a building, look for a marker
      ;; a problem with edge creeping is that all of the workers are in a single trail, not using the width of the path

      ;; first, turn towards the item we are going around  (it is like keeping a hand on the wall)
      ;;ifelse (go-right? = true) [ left 45 ][ right 45 ]

      ;; creep the edge.  If you can't step forward, look right.  Only look one step ahead; eventually we will creep out to open space.
      set nextpatch [pcolor] of patch-ahead 1
      let step-counter 0
      while [not member? nextpatch  allowed-patches and step-counter < 10] [
        ifelse (go-right? = true) [
           right 45
        ][
           left 45
        ]
        set nextpatch [pcolor] of patch-ahead 1
        set step-counter step-counter + 1
      ]

      set hugging-edges-steps hugging-edges-steps - 1

      ;; this guy is totally trapped, just give up.
      if (step-counter = 10) [
        set color black
        set pcolor green
        show (word "trapped worker: " who)
        die
      ]

  ]

end  ;; set-direction



