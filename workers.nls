;;
;; WORKERS
;;
;; describe workers and store information
;; functions to create and direct them
;;

breed [ workers worker  ]

globals [
  worker-groups    ;;
  group-history    ;; an array for each group:  source, dest, bold, num-in-group, list of trip counts at each tick
  group-summaries  ;; an array for each repetition of the trial
  groupids         ;; a list of groupids, because ids are repeated in worker-groups
  
  ;; indexes in the group-history array
  I-grpsrc
  I-grpdst
  I-grpid
  I-grpname
  I-grpbold
  I-grpcount
  
  ;; indexes in the worker-groups array
  IWG-ID
  IWG-NAME
  IWG-QUANTITY
  IWG-FROM
  IWG-TO
  IWG-MEAN-WORK-TIME
  IWG-STD-DEV-WORK-TIME
  IWG-SLOW-IN-MUD
  IWG-TIRED-IN-MUD
  IWG-RISK-DANGER
  IWG-COLOUR
]


workers-own [
  groupid               ;; id given in workers.csv
  name                  ;; from workers.csv
;;  searching?            ;; 1 if going to the materials, 0 if returning\
  is-bold?              ;; true, will go through obsticles
  energy                ;; start at tick-count, at zero just quit
  allowed-patches       ;; colours of patches this guy can step on
  trips-completed       ;; number of round-trip journies
  home-building         ;; place this worker starts out
  destination-building  ;; number of the building they are currently heading to
  goal                  ;; random space within the building they are heading to
  dice-tossed?          ;; for people in the danger zone, toss the dice once per trip
  no-energy-tick        ;; the tick count when this worker runs out of energy
  go-right?             ;; true if this turtle looks to the right for an open route.  set this when the goal is set
  hugging-edges-steps   ;; if the turtle starts hugging the edge, this is how many more steps to do it for
  working-ticks         ;; count down how long a worker stays in a work building
  trail-id              ;; which string of breadcrumbs is he following
  breadcrumb-reverse    ;; true if starting at end and going to beginning
  breadcrumb-num        ;; how far along the string of breadcrumbs is he
  injured?              ;; has this worker been injured?
  bump-count            ;; how often does this worker step aside because of the crowd ahead
  jammed-count          ;; how often does this worker not move at all because of the crowd ahead
  time-in-obstacle      ;; how much time is spent wading in the mud
  steps-from-path       ;; how many times did this worker step aside for someone else, and to which side?  -1 left, 1 right
  planned-injury        ;; If this is non-zero, the worker will be injured at this step.  This allows us to control the percentage injury by group instead of by trip or by step.
  time-worked           ;; amount of time this worker spent working.
]


;; init-worker-constants
to init-worker-constants
  set IWG-ID                0
  set IWG-NAME              1
  set IWG-QUANTITY          2
  set IWG-FROM              3
  set IWG-TO                4
  set IWG-MEAN-WORK-TIME    5
  set IWG-STD-DEV-WORK-TIME 6
  set IWG-SLOW-IN-MUD       7
  set IWG-TIRED-IN-MUD      8
  set IWG-RISK-DANGER       9
  set IWG-COLOUR           10
  
  set I-grpsrc   0
  set I-grpdst   1
  set I-grpid    0
  set I-grpname  1
  set I-grpbold  2   ;; true/false
  set I-grpcount 3  
end


;;
;; setup-workers
;;
;; called from setup function to read building list and generate all of the workers
;;
to setup-workers
  init-worker-constants
  set group-history []
  set group-summaries []   ;; group history for every repetition.
  set groupids [];
  
  set worker-groups csv:from-file "workers.csv" 
  set worker-groups remove-item 0 worker-groups  ;; remove headers row
  
  foreach worker-groups [
    group ->
    let newgroupid item IWG-ID group
      if not member? newgroupid groupids [
        set groupids lput newgroupid groupids
        let numworkers item IWG-QUANTITY group
        let color1 (item IWG-COLOUR group) - 1
        let color2 item IWG-COLOUR group + 1
        create-workers numworkers [
        if newgroupid = "1" [ pen-down ]
           let src item IWG-FROM  group
           let dest item IWG-TO  group
           set groupid newgroupid
           set name item IWG-NAME group
           move-to one-of patches with [building-number = src]
           init-worker color1 color2 dest src
        ]
      let hazard-pay item IWG-RISK-DANGER group
    ]
  ]

  ;; todo - set injury rates back on with new model
      ;; for workers going through the danger zone, xx% of them will be injured.  This is a change from calculating it per trip or per step.
;;      ask workers with [is-bold? = true and hazard-pay > 0] [  
        ;; injury rate is found in buildings.csv, and made into a global variable
;;        let odds random 100
;;        if odds < 2 [ set planned-injury random total-ticks]
;;      ]
  
end

to fresh-workers
  ask workers [die]  ;; make sure there aren't leftovers.
  reset-ticks
  setup-workers
end


;;
;; record-group-stats
;;
;; For every tick, grab the current stats on each group (trips completed, tired workers)
;;
to record-group-stats
  let new-history []

  if group-history = 0 [
    show "No group history available"
    stop
    ]
  
  foreach group-history
  [
    row ->
    let thegroup workers with [groupid = item I-grpid row and is-bold? = item I-grpbold row ]
    if count thegroup > 0 [
       let sum-trips  sum [trips-completed] of  thegroup
       let total-work  sum [time-worked] of  thegroup
       ;;show total-work
       let avg-trips  mean [trips-completed] of  thegroup
       let retired count  thegroup with [energy <= 0 and injured? = false ]
       let injured count  thegroup with [injured? = true ]
       set new-history lput (lput (list ticks sum-trips  avg-trips retired injured total-work) row) new-history
       ;;show new-history
    ]
  ]
  set group-history new-history
end


;;
;; group-stats
;;
;; For each group with the same source and dest, drop some facts.  Used at the end of the run.
;;
to-report group-stats [thegroupid]
  
    let avoiders 0
    let avoiders-trips 0
    let avoiders-triptime 0
    let total-avoider-trips 0

    if not ignore-obsticles    [ 
      set avoiders count workers with [is-bold? = false and groupid = thegroupid]
    ]
    let bold count workers with [is-bold? = true and groupid = thegroupid]
    let bold-trips  mean [trips-completed] of  workers with [is-bold? = true and groupid = thegroupid]
    let bold-triptime 0
    if bold-trips > 0 [ set bold-triptime  total-ticks / bold-trips]
    if not ignore-obsticles [
      set avoiders-trips  mean [trips-completed] of  workers with [is-bold? = false and groupid = thegroupid]
      set avoiders-triptime 0
      if avoiders-trips > 0 [ set avoiders-triptime total-ticks / avoiders-trips ]
    ]
    
    let nappers workers with [no-energy-tick > 0 and injured? = false and groupid = thegroupid]
    let napper-times 0
    if count nappers > 0 [set napper-times mean  [no-energy-tick] of nappers]
    
    let num-injured count workers with [injured? = true and groupid = thegroupid]
    
    let total-trips sum [trips-completed]  of  workers with [groupid = thegroupid]
    let total-bold-trips sum [trips-completed]  of  workers with [is-bold? = true and groupid = thegroupid]
    if not ignore-obsticles [
      set total-avoider-trips sum [trips-completed]  of  workers with [is-bold? = false and groupid = thegroupid]
    ]
    let total-worktime sum [time-worked] of  workers with [groupid = thegroupid]

    report (list thegroupid thegroupid avoiders bold avoiders-trips bold-trips avoiders-triptime bold-triptime napper-times num-injured total-trips total-bold-trips total-avoider-trips total-worktime)
end





;;
;; write-worker-stats
;;
;; Create a file for each group, show all of the stats for every tick.
;;
to write-worker-stats
  ;; start with column headers
  let myheaders ["ticks" "total trips" "average trips" "retired" "injured"]
  

  if group-history = 0 [
    show "No group history available"
    stop
    ]

  foreach group-history
  [
    hist ->
     let myout (list myheaders)
     
     foreach hist [
       row ->
       if is-list? row [ set myout lput row myout ]
     ]

     ;; create a filename, and write the results
     let filename (word "C:\\WorksiteTrafficResults\\results-group-" item I-grpid hist )
     ifelse item I-grpbold hist = true
     [ set filename (word filename "-bold.csv") ]
     [ set filename (word filename "-avoider.csv") ]
     csv:to-file filename myout
  ]
  
  show "Results have been saved to C:\\WorksiteTrafficResults\\results-group"
end


;;
;; record-worker-summaries
;;
;; Creates an array listing summaries for each group for each repetition.  A group is workers who share the same source and dest.
;;
to record-worker-summaries
  ;; building stats
  show "worker summaries"
  let myheaders ["source building" "dest building" "number of avoiders" "number of bold workers" "average trips for avoiders" "average trips for bold" "average time per trip avoiders" "average time per trip bold" "average ticks mudders get tired" "num injured workers" "total trips for group" "total bold trips"  "total avoider trips"  "total time working"]
  let myout (list myheaders)
  let summary []

  foreach groupids [
    thegroupid ->

      let mystats group-stats  thegroupid
      ;;show mystats
      foreach mystats [
      row ->
         set summary lput row summary
      ]
      ;;show summary
  ]
  
  set group-summaries lput summary group-summaries
  show group-summaries
 ;; csv:to-file "C:\\WorksiteTrafficResults\\results-groupstats.csv" myout

end

;; write-repeated-worker-summaries
;;
;; all of the info from write-worker-summaries on a single line, and a line for every repeat
;;
to write-repeated-worker-summaries
  let headerset ["group ID" "group name" "number of avoiders" "number of bold workers" "average trips for avoiders" "average trips for bold" "average time per trip avoiders" "average time per trip bold" "average ticks mudders get tired" "num injured workers" "total trips for group" "total bold trips"  "total avoider trips"  "total time working"]
  let headers []
  let myout []
  
  foreach worker-groups [
    grp ->
      let buildnum  item IWG-FROM grp
      let dest item IWG-TO grp
  ]
  
  
  foreach building-list [
    bld ->
    let buildnum  item I-ID bld
    foreach item I-Dest bld
    [
      row ->
      ;;show mystats
      foreach headerset [
         set headers lput row headers
      ]
    ]
  ]  
  
  set group-summaries fput headers group-summaries
  csv:to-file "C:\\WorksiteTrafficResults\\results-repeatedtrials.csv" group-summaries
  show "results saved to C:\\WorksiteTrafficResults\\results-repeatedtrials.csv"
end


;;
;; write-worker-summaries
;;
;; Creates a file listing summaries for each group.  A group is workers who share the same source and dest.
;;
to write-worker-summaries
  ;; building stats
  let myheaders ["groupid" "group name" "number of avoiders" "number of bold workers" "average trips for avoiders" "average trips for bold" "average time per trip avoiders" "average time per trip bold" "average ticks mudders get tired" "num injured workers" "total trips for group" "total bold trips"  "total avoider trips"  "total time working"]
  let myout (list myheaders)

  foreach groupids [
    grp ->
      let mystats group-stats  grp
      set myout lput mystats myout
  ]
  csv:to-file "C:\\WorksiteTrafficResults\\results-groupstats.csv" myout

end



;;
;; init-worker
;;
;; Initializes a single worker, personality, destination.
;; input: colours for bold/timid, list of possible destinations, home
;;
to init-worker [  colorA colorB dest home-plate]
      ;;let dest one-of dest-buildings
      set home-building home-plate
      set destination-building dest
      set bump-count 0
      set jammed-count 0
      set time-in-obstacle 0
      set time-worked 0
      set size 1
      set breed workers
      set injured? false
      set trips-completed 0
      set energy total-ticks
      ifelse ignore-obsticles 
      [set is-bold? true]
      [set is-bold? one-of [true false] ]
      ifelse is-bold? = true
         
      [  
         set-worker-bold colorA
      ][
         set-worker-avoider colorB
      ]

      set no-energy-tick 0
      set breadcrumb-num 0
      set-new-destination dest 0
      set steps-from-path 0
      set planned-injury 0    ;; most people don't expect to be injured, but some will have a sword of Damacles over their heads.  They just don't know it  yet.
end

;;
;; set-worker-bold
;;
;; give a worker "bold" properties, charging through mud, laughing at danger, unstoppable (unless it's mother calls)
;;
to set-worker-bold [colorA]
  set color colorA
  set is-bold? true
   set allowed-patches (list clr-path clr-road clr-moveable-facility )
   set allowed-patches lput clr-slowmud allowed-patches
   set allowed-patches lput clr-tiredmud allowed-patches
   set allowed-patches lput clr-danger allowed-patches
   
    ;; new requirement in December - let the main building be a possible destination.
    if destination-building = 1 [
         set allowed-patches lput clr-fixed-facility allowed-patches
    ]
end

;;
;; set-worker-avoider
;;
;; give a worker "avoider" properties, going around mud or danger
;;
to set-worker-avoider [colorB]
  set is-bold? false
  set allowed-patches (list clr-path clr-road clr-moveable-facility )
  set color colorB
  ;; new requirement in December - let the main building be a possible destination.
  if destination-building = 1 [
       set allowed-patches lput clr-fixed-facility allowed-patches
  ]
end



;;
;; set-new-destination
;;
;; workers - follow the breadcrumbs
;; called when:  create people, arrive at destination, buildings move
;;
to set-new-destination [new-dest add-trip ]

      let thegoal one-of patches with [building-number = new-dest]
      ask patch pxcor pycor [
         set thegoal shoot-a-dart new-dest
      ]
      set goal thegoal
      set destination-building new-dest
      face-nowrap goal
      set trips-completed trips-completed + add-trip
      set dice-tossed? 0
      set hugging-edges-steps 0
      set steps-from-path 0

      ;; tell turtle which direction it will need to turn to go away from the center
      ;; this is leftover from code where the turtles each found their own way, and would tell them which way to look for a path.
      let centerheading towardsxy 105 105
      ifelse (subtract-headings centerheading heading > 0) [
        set go-right? false
      ] [
        set go-right? true
      ]
      
      ;; change shade of worker
      ifelse new-dest = home-building [set color color + 1][set color color - 1]
      
      ;; choose a trail of breadcrumbs
      let src home-building
      if new-dest = home-building [set src destination-building]
      let crumbly select-breadcrumbs src new-dest is-bold?

      ifelse length breadcrumb-trails > 6 [
         if length crumbly > 2 [
           let mytrail item (item 0 crumbly) breadcrumb-trails
         ]
  ][show ("Less than 6 breadcrumb tails - what does that even mean?")]
      
      ifelse length crumbly > 2 [
        set trail-id item 0 crumbly     
        set breadcrumb-reverse item 1 crumbly     ;; true/false
        set breadcrumb-num item 2 crumbly    
    ][show ("no trail - direct path?") ]
end


;;
;; redirect-workers
;;
;; called when:  a building moves after "go" is pressed.
;;
to redirect-workers
         ;; some workers were heading to this building, redirect them to the new destination
         ask workers with [destination-building = building-to-move][
           set-new-destination destination-building  0
         ]
end


;;
;; create-breadcrumbs-from_buildinglist
;;
;; AFTER building list is built,
;; AFTER buildings are all drawn,
;; BEFORE workers are created
;;
to create-breadcrumbs-from_workerlist
  init-worker-constants
  set worker-groups csv:from-file "workers.csv" 
  set worker-groups remove-item 0 worker-groups  ;; remove headers row  

  foreach worker-groups [
    grp ->
      let buildnum  item IWG-FROM grp
      let dest item IWG-TO grp

        if not trail-exists buildnum dest true [
            let newtrail blaze-trail buildnum dest true
            if length newtrail > 6 [
               set breadcrumb-trails lput newtrail breadcrumb-trails
            ]
        ]
        if not ignore-obsticles [
         if not trail-exists buildnum dest false [
            let newtrail blaze-trail buildnum dest false
            if length newtrail > 6 [
              set breadcrumb-trails lput newtrail breadcrumb-trails
            ]
         ]
        ]
    ]  
    

end




;;
;; check-goal
;;
;; worker procedure - if they have reached the goal, set a new one
;;
to check-goal
  ;; did we reach the destination?  return to home!
  if building-number = destination-building  [
    foreach worker-groups [
      group ->
       let from item IWG-FROM group
       let rowgroupid item IWG-ID group
      
      ;; the right row has the same group and starts from the building we are at now.
      if groupid = rowgroupid and building-number = from [
          let newdest item IWG-TO group 
         let add-lap  0
          if newdest = home-building [ set add-lap  1]
          set-new-destination  newdest add-lap
        
          set working-ticks  random-normal item IWG-MEAN-WORK-TIME group item IWG-STD-DEV-WORK-TIME group
      ]
    ]
  ]

end



;;
;; move-worker
;;
;; worker procedure, single worker
;; spend time working, see if obsticle impacts the next step, bump into each other
;;
to move-worker

    ;; if they are done for the day, stop
    if color = black [
      stop;
    ]
    
    let debug false
    if who = -1 [set debug true]

    ;; let the worker spend some time working int the dest building.
    if working-ticks > 0 [
      set time-worked time-worked + 1
      set working-ticks working-ticks - 1
      set energy energy - 1
      stop
    ]

     let step-size 1
     let effort 1
     let chance-of-injury-percent 0


  ;;  without-interruption [


         ;;set-direction little-dude
         follow-the-yellow-brick-road

         let nextpcolor [pcolor] of patch-ahead 1

         if not member? nextpcolor  allowed-patches [
           set hugging-edges-steps 10
         ]

         ;; check for sticky situations
         if pcolor = clr-slowmud and is-bold? = true
         [ set step-size obslow-speed 
           set effort obslow-energy
           set chance-of-injury-percent obslow-injury
         ]
         if pcolor = clr-tiredmud and is-bold? = true
         [ 
           set step-size obtired-speed 
           set effort obtired-energy
           set chance-of-injury-percent obtired-injury
         ]
         if pcolor = clr-danger and is-bold? = true
         [
           set step-size obdanger-speed 
           set effort obdanger-energy
           set chance-of-injury-percent obdanger-injury
         ]


         ;; roll the dice if we are in a danger zone  (old method - test for injury once per trip through the danger zone)
         ;;if chance-of-injury-percent > 0 and dice-tossed? = 0 [
         ;;    if random 100 < chance-of-injury-percent
         ;;    [ 
         ;;         set color black
         ;;         set injured? true
         ;;         set energy 0
         ;;         move-to patch 1 1
         ;;     ]
         ;;     set dice-tossed? 1
         ;;]
         
         if planned-injury > 0 and ticks = planned-injury [
           ;;; bwahahahahah <evil laughter>  you did not know that your doom was set before you started.  And now you have reached the end of your time.
           set injured? true
           set color black
           set energy 0
           move-to patch 1 1
         ]




         ;; check for someone on that patch, step to the right (unless we are already hugging an edge)
         if (count (turtles-on (patch-ahead 1)) >= (max-turtles-per-square + 1)  ;; add one becasue the current worker sees himself, we are checking for other workers.
            and [building-number] of patch-ahead 1 = 0)
         [
           
           ;; see if this guy is a buddy going the same direction as you
           let buddies false
           let my-goingto destination-building
           ask turtles-on (patch-ahead 1) [
             if destination-building = my-goingto
             [
               set buddies true;
               if debug = true [show (word "blocked by travel buddies")]
             ]
           ]
           
           
           ;; check how far we have stepped from path and try to go back (if there is a trail)
           let nextpatch patch-right-and-ahead 90 1
           ifelse (steps-from-path < -1 or steps-from-path > 1) and breadcrumb-num >= I-firstpoint
           [
                              if debug = true [show (word "turning back to patch.  steps away" steps-from-path)]

             ifelse steps-from-path > 0
             [ set nextpatch patch-left-and-ahead 90 1
               set steps-from-path steps-from-path - 1
]
             [ set steps-from-path steps-from-path + 1]
                              if debug = true [show (word "just turned, and now we are...  steps away" steps-from-path)]
           ]
           [
             ;; if the workers ahead are your buddies, go left, otherwise go right.  Left will help avoid clumping around a stuck guy.
             ifelse buddies = true
             [ set nextpatch patch-left-and-ahead 90 1
               set steps-from-path steps-from-path - 1
               if debug = true [show (word "turning left around buddy")]
               ]
             [ set steps-from-path steps-from-path + 1
               if debug = true [show (word "turning right around stranger")]
               ]
           ]
           
            
           set nextpcolor [pcolor] of nextpatch
            ifelse ( member? nextpcolor  allowed-patches 
              and ((count (turtles-on (nextpatch)) < max-turtles-per-square) or [building-number] of nextpatch = 0))
            [
              
               if debug = true [show (word "seems to be an open step moving from  " patch-here" to " nextpatch) ]
              ;; TODO - check to see if the person ahead is the same group going the same direction.  Step left instead, because one stopped person can jam everyone that steps in behind.
               move-to nextpatch
               set bump-count bump-count + 1
               ;;show "bump"
               set energy energy - effort
               stop
            ][
               ;; can't move forward.  haven't been able to move forward.  find any possible open patch adn move.
               if debug = true [show (word "jammed")]
               set jammed-count jammed-count + 1
               if jammed-count > 2 [
                 let good-patches allowed-patches
                 let some-rando one-of patches in-radius 1 with [member? pcolor good-patches and count turtles <= (max-turtles-per-square + 1)]
                 if is-patch? some-rando 
                 [move-to some-rando 
                   set jammed-count 0]               ]
            ]
            stop
         ]


         ;; and move!
         set energy energy - effort
         forward step-size

         ;; record muddy steps
         if  member? pcolor (list clr-slowmud clr-tiredmud clr-danger)
         [  set time-in-obstacle time-in-obstacle + 1]

         ;; tired yet?
         if energy < 1 and no-energy-tick = 0 [
           set color black
           set no-energy-tick  ticks
           pen-up
           move-to patch 1 1
         ]

;;    ]  ;; without-interruption
end



