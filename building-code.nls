
;; indicies in the array building-list
globals [
 building-list     ;; read from input file, then tweaked.
 background-colours ;; preserve colours of patches behind a building.
 
 I-ID              ;;  0  - ID of the building
 I-Name            ;;  1
 I-Width           ;;  4
 I-Height          ;;  5
 I-NumWorkers      ;;  6 - total number of workers starting from this building
 I-Dest            ;;  7  - workers in this building are going towards one of these buildings (this item is a list)
 I-MudSlows        ;;  8 - bold workers will be slowed down in the mud
 I-MudTires        ;;  9
 I-Harm            ;; 10 - workers in this building are harmed if they enter the danger zone
 I-MinWork         ;; 11 - min time spent in dest 
 I-MaxWork         ;; 12 - max time spent in dest
 I-Center          ;; 15 - the center patch - do not keep looking up the array and calculating this.
 I-Radius          ;; 16 - limit the worker destinations to a circle in the middle.
 I-CoveredColours  ;; 17 - record all of the colours that were on these patches before the building was made.
]

; 
; setup-building-index-values
;
; Create a list of meaningful values for indexes in building-list
;
to setup-building-index-values
  set I-ID              0
  set I-Name            1
  set I-Width           4
  set I-Height          5
  set I-NumWorkers      6
  set I-Dest            7
  set I-MudSlows        8
  set I-MudTires        9
  set I-Harm           10
  set I-MinWork        11
  set I-MaxWork        12
  set I-Center         15
  set I-Radius         16
  set I-CoveredColours 17
end

; 
; create-buildinglist
;
; reads the xlsx file, creates an array of buildings
;
to create-buildinglist
    let temp-building-list csv:from-file "buildings.csv" 
    set background-colours [] 
    
    let firstrow item 0 temp-building-list
    if item 0 firstrow = "facility" [ set temp-building-list remove-item 0 temp-building-list]

    foreach temp-building-list [
      let buildnum  item I-ID ?
      let dest item I-Dest ?
      let mud-slows 0
      if item 8 ? > 0 or item 9 ? > 0 
      [ set mud-slows 1 ]
      let danger-harms item 10 ?
      
      ;; check destination(s) for a single value or a list
      ;; currently, this only works for two destinations.  need to loop for more than two
      ifelse (member? "," (word dest)) [
        let comma position "," dest
        let desta read-from-string substring dest 0 comma
        let destb read-from-string substring dest (comma + 1) (length dest)
        set dest list desta destb
      ]  [
        set dest (list dest)
      ]
      
      ;; update the building array
      let new-building replace-item I-Dest ? dest
      set new-building lput patch item 2 ? item 3 ? new-building  ;; index 13 is the center of the building, and we will reset this when the building is created/moded
      let worker-zone (min (list item 4 ? item 5 ? ) / 2 ) - 2
      set new-building lput worker-zone new-building  ;; index 14  ;; keep workers in this radius around the center

      set building-list lput new-building building-list
    ]
    
end



;;
;; group-stats
;;
;; For each group with the same source and dest, drop some facts.  Used at the end of the run.
;;
to-report group-stats [building-num dest]
    let bx1 min [pxcor] of patches with [building-number = building-num]
    let by1 min [pycor] of patches with [building-number = building-num]
    let bwid max [pxcor] of patches with [building-number = building-num] - bx1
    let blen max [pycor] of patches with [building-number = building-num] - by1

    let avoiders count workers with [is-bold? = false and home-building = building-num and destination-building = dest]
    let bold count workers with [is-bold? = true and home-building = building-num and destination-building = dest]
    let avoiders-trips  mean [trips-completed] of  workers with [is-bold? = false and home-building = building-num and destination-building = dest]
    let bold-trips  mean [trips-completed] of  workers with [is-bold? = true and home-building = building-num and destination-building = dest]
    let avoiders-triptime 0
    if avoiders-trips > 0 [ set avoiders-triptime total-ticks / avoiders-trips ]
    let bold-triptime 0
    if bold-trips > 0 [ set bold-triptime  total-ticks / bold-trips]

    let nappers workers with [no-energy-tick > 0 and injured? = false and building-num = home-building  and destination-building = dest]
    let napper-times 0
    if count nappers > 0 [set napper-times mean  [no-energy-tick] of nappers]
    
    let num-injured count workers with [injured? = true and building-num = home-building  and destination-building = dest]

    report (list building-num dest avoiders bold avoiders-trips bold-trips avoiders-triptime bold-triptime napper-times num-injured)
end

;;
;; building-stats
;;
;; For each group with the same source and dest, drop some facts.  Used at the end of the run.
;;
to write-building-stats 
  ;; building stats
  ;; facility  name  x  y  width  height  num workers  dest  slow in mud  tired in mud  risk danger  min time working  max time working

  let myheaders ["facility" "name" "x" "y" "width" "height" "num workers" "dest" "slow in mud" "tired in mud" "risk danger" "min time working" "max time working"]
  let myout (list myheaders)

  foreach building-list [
    let buildnum  item I-ID ?
    if buildnum != "facility" [
      let bx1 min [pxcor] of patches with [building-number = buildnum]
      let by1 min [pycor] of patches with [building-number = buildnum]
      let bwid max [pxcor] of patches with [building-number = buildnum] - bx1
      let blen max [pycor] of patches with [building-number = buildnum] - by1
      let dest item 0 item I-Dest ?
      if length item I-Dest ? > 1 [ set dest (word item 0 item I-Dest ? "," item 1 item I-Dest ?) ]  ;; note - only allows two, need more complex processing for more.
      set myout lput (list buildnum item I-Name ? bx1 by1 bwid blen item I-NumWorkers ? dest item I-MudSlows ? item I-MudTires ? item I-Harm ? item I-MinWork ? item I-MaxWork ?) myout
    ]
  ]
  csv:to-file "results-buildings.csv" myout
end


;;
;; center-of
;;
;; find the building info, return the center
;;
to-report center-of [ building-num]
  foreach building-list [
    if building-num = item 0 ? [
      if not is-patch? item 15 ? [
        report reset-center-of-building building-num
      ]
      report item 15 ?
    ]
  ]
  
  ;; 1 doesn't appear in the list, just look it up.
  if building-num = 1
  [
      report reset-center-of-building building-num
  ]
  
  ;; this should not be possible.  but just in case.
  report patch 1 1
end

;;
;; worker-radius
;;
;; find the building info, return the radius where workers should start
;;
to-report shoot-a-dart [ building-num]
  let theradius 15
  let thedart one-of patches with [building-number = building-num]
  
  ;; look up the radius
  foreach building-list [
    if building-num = item 0 ? [
      set theradius item 16 ?
      
    ]
  ]
  
  ;; find the center, ask a patch near the center to volunteer
  sprout 1  [
    move-to center-of building-num
    set thedart one-of patches in-radius theradius
    die
  ]
  
  report thedart
    
end

;;
;; find-center-of-building
;;
;; look on map to see building center of current building location, update the array of building info
;;
to-report reset-center-of-building [building-num]
;; another option is nearest block in building    
;; min-one-of patches with [ building-number = [destination-building] of myself ] [ distance myself ]
    let bx1 min [pxcor] of patches with [building-number = building-num]
    let by1 min [pycor] of patches with [building-number = building-num]
    let bx2 max [pxcor] of patches with [building-number = building-num]
    let by2 max [pycor] of patches with [building-number = building-num]
    let bxcenter mean list bx1 bx2
    let bycenter mean list by1 by2

    let ndx 0
    foreach building-list [
      if building-num = item 0 ? [
            let new-building replace-item 15  ? patch bxcenter bycenter  ;; index 15 is the center of the building, and we will reset this when the building is created/moded
            set building-list replace-item ndx building-list new-building
      ]
      set ndx ndx + 1
    ]
    
    report patch bxcenter bycenter
end


;;
;; move-building-to-click
;;
;; If the UI button "move building" is down, respond to a mouse click. 
;; Move the bottom left corner of the building to the point where the mouse was clicked.  Replace with "path". 
;;
to move-building-to-click
  
  ;; respond after a mouse click is released
  if mouse-down? [ set mouse-was-down? true ]
  if mouse-was-down? = true and not mouse-down? [
    set mouse-was-down? false 
 
    without-interruption [
         move-building building-to-move patch mouse-xcor mouse-ycor
         
         ;; delete old breadcrumbs, make new ones.  People too, we need them cleared to make breadcrumbs.
         ask workers [ die ]
         set breadcrumb-trails []
         create-breadcrumbs-from_buildinglist
         setup-workers

       ]
  ]

end



;;
;; move-building
;;
;; Move the given building to the given patch.  Worry about the cleanup after (redrawing breadcrums, recreating people).
;;
to move-building [id thepatch]
   let temp-building-width 20
   let temp-building-height 20

   ;; grab the building size
   ask patches with [building-number = id] [
     set temp-building-width  building-width
     set temp-building-height building-height
   ]
   
   if not building-fits? [pxcor] of thepatch [pycor] of thepatch temp-building-width temp-building-height
   [ show "The building will not fit here."
     stop ]

   ;; clear the old building
   restore-background id

   ;; create the new building
   let x2  [pxcor] of thepatch + temp-building-width
   let y2   [pycor] of thepatch + temp-building-height
   construct-hovel id [pxcor] of thepatch [pycor] of thepatch x2 y2
   
end


;;
;; restore-background
;;
;; Set the building patches to the colours in the preserved list 
;;
to restore-background [building-num]
  foreach background-colours 
  [
    if item 0 ? = building-num
    [
      let background item 1 ?
      foreach background
      [
        ask patch item 0 ? item 1 ? 
        [ 
          set pcolor item 2 ? 
          set building-number 0
        ]
      ]
      stop
    ]
  ]
end

;;
;; construct-hovel
;;
;; Set up the given range of patches to be a building, and add the required information. 
;;
to construct-hovel [building-num x1 y1 x2 y2]
  without-interruption
  [
    
   let background [] 
   ask patches with [pxcor >= x1 and pxcor <= x2 and  pycor >= y1 and pycor <= y2]
   [
     set background lput (list pxcor pycor pcolor) background
     set pcolor  clr-moveable-facility
     set building-number  building-num
     set building-width x2 - x1
     set building-height y2 - y1
   ]
   preserve-background  building-num background 
 
   let center reset-center-of-building building-num  ;; find it, update the record

   ask patches with [pxcor = x1 + 5 and pycor = y1 + 5]
   [
     set plabel-color black
     set plabel building-num
   ]
  ]
end

;;
;; preserve-background
;;
;; For each building ID, add a list of background colours.  If the building is already in the list, replace it. 
;;
to preserve-background [ building-num background ]
  let index 0
  if is-list? background-colours [
    foreach background-colours 
    [
      if item 0 ? = building-num
      [
        set background-colours replace-item index background-colours (list building-num background)
        stop
      ]
      set index index + 1
    ]
  ]
  
  ;; if we got to here, this building is not in the list
  set background-colours lput (list building-num background) background-colours
end


to-report work-time [building-num]
  foreach building-list [
    if building-num = item 0 ? [
      let min-time item 11 ?
      let range item 12 ? - item 11 ?
      let the-time random (range) + min-time
      report the-time
    ]
  ]

  report 0
end


;;
;; mark-mainbuilding
;;
;; The position of building 1 is defined in the bitmp file, by patach color.
;;
to mark-mainbuilding 
  ask patches with [pcolor = clr-fixed-facility]
  [ set building-number 1]   
end

;;
;; make-buildings-from-list
;;
;; Check out the list, create the buildings.  Caled from Startup
;;
to  make-buildings-from-list[  ]
  foreach building-list [
    let buildnum  item 0 ?
    if buildnum != "facility" [
      let buildname  item 1 ?
      let x1  item 2 ?
      let y1  item 3 ?
      let width  item 4 ?
      let height  item 5 ?
      let x2  x1 + width
      let y2  y1 + height

      construct-hovel buildnum x1 y1 x2 y2
    ]
  ]
  mark-mainbuilding 
  
end


;;
;; building-fits?
;;
;; Check the patches here, see if a building is allowed in all of them.
;;
to-report building-fits? [thex they width height ]
  let itfits? true
  ask patches with [pxcor >= thex and pxcor <= thex + width and pycor >= they and pycor  <= they + height]
  [
    if not member? pcolor  (list clr-path clr-slowmud clr-tiredmud clr-road clr-danger ) [ set itfits? false ]
  ]
  
  report itfits?
end

;; make-buildings-dance
;;
;; Chose a random location for every building.  Let's dance.  
to make-buildings-dance
  foreach building-list [
    random-locate item I-ID ?
  ]

   ;; delete old breadcrumbs, make new ones.  People too, we need them cleared to make breadcrumbs.
   ask workers [ die ]
   set breadcrumb-trails []
   create-breadcrumbs-from_buildinglist
   setup-workers

end

;;
;; building-fits?
;;
;; Check the patches here, see if a building is allowed in all of them.
;;
to random-locate [buildingid]

  ;; look up building size
  let len 4
  let wid 4
  foreach building-list [
    if buildingid = item I-ID ? [
      set len item I-height ?
      set wid item I-width ?
    ]
  ]
  
  let possibilities []
  without-interruption [
    no-display
    ask patches with [member? pcolor (list clr-path clr-slowmud clr-tiredmud clr-road clr-danger) ]
    [
      if building-fits? pxcor pycor wid len 
      [
        set possibilities lput  self possibilities
      ]
    ]
    display
  ]

  move-building buildingid one-of possibilities

end

